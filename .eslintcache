[{"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/index.js":"1","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/App.js":"2","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/data.js":"3","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Context.js":"4","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/config.js":"5","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Home.js":"6","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/NewPost.js":"7","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/BookmarkPage.js":"8","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/UserSignUp.js":"9","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Dashboard.js":"10","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/MyAccount.js":"11","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Nav.js":"12","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/ValidationError.js":"13","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/About.js":"14","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/FilterButtonsForm.js":"15","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/FilterButtons.js":"16","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/ResultList.js":"17","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/IconButton.js":"18","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/SinglePost.js":"19","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Tooltip.js":"20","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Functions/FilterResults.js":"21","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/libraries/fontawesome.js":"22","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/DeletePost.js":"23","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/UpdateBookmark.js":"24","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/AddBookmark.js":"25","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/DeleteBookmark.js":"26"},{"size":309,"mtime":1610083305000,"results":"27","hashOfConfig":"28"},{"size":6062,"mtime":1610343966989,"results":"29","hashOfConfig":"28"},{"size":5721,"mtime":1610083305000,"results":"30","hashOfConfig":"28"},{"size":3397,"mtime":1610083305000,"results":"31","hashOfConfig":"28"},{"size":222,"mtime":1610785267737,"results":"32","hashOfConfig":"28"},{"size":2045,"mtime":1610083305000,"results":"33","hashOfConfig":"28"},{"size":15168,"mtime":1610348325496,"results":"34","hashOfConfig":"28"},{"size":3083,"mtime":1610083305000,"results":"35","hashOfConfig":"28"},{"size":2455,"mtime":1610301186329,"results":"36","hashOfConfig":"28"},{"size":1141,"mtime":1610436943595,"results":"37","hashOfConfig":"28"},{"size":2757,"mtime":1610337882760,"results":"38","hashOfConfig":"28"},{"size":1773,"mtime":1610347773938,"results":"39","hashOfConfig":"28"},{"size":208,"mtime":1610083305000,"results":"40","hashOfConfig":"28"},{"size":1647,"mtime":1610083305000,"results":"41","hashOfConfig":"28"},{"size":1351,"mtime":1610083305000,"results":"42","hashOfConfig":"28"},{"size":1459,"mtime":1610083305000,"results":"43","hashOfConfig":"28"},{"size":1383,"mtime":1610438704190,"results":"44","hashOfConfig":"28"},{"size":1996,"mtime":1610083305000,"results":"45","hashOfConfig":"28"},{"size":5523,"mtime":1610083305000,"results":"46","hashOfConfig":"28"},{"size":740,"mtime":1610083305000,"results":"47","hashOfConfig":"28"},{"size":1327,"mtime":1610083305000,"results":"48","hashOfConfig":"28"},{"size":429,"mtime":1610083305000,"results":"49","hashOfConfig":"28"},{"size":2074,"mtime":1610083305000,"results":"50","hashOfConfig":"28"},{"size":3736,"mtime":1610083305000,"results":"51","hashOfConfig":"28"},{"size":1936,"mtime":1610083305000,"results":"52","hashOfConfig":"28"},{"size":1798,"mtime":1610083305000,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1i5qvf",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/index.js",[],["109","110"],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/App.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/data.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Context.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/config.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Home.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/NewPost.js",["111"],"import React, { Component } from 'react';\nimport Nav from './Nav';\nimport FilterButtons from './FilterButtons';\nimport FilterButtonsForm from './FilterButtonsForm';\nimport Context from '../Context'\nimport '../_styles/Form.css';\nimport config from '../config'\nimport ValidationError from './ValidationError'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCalendarAlt, faIdCard, faSmile  } from '@fortawesome/free-regular-svg-icons';\nimport { faPodcast, faSeedling, faBookOpen,faUser, faHeartbeat} from '@fortawesome/free-solid-svg-icons';\nimport {BASE_URL} from \"../../src/config\";\nimport {BASE_URL_FRONTEND} from \"../../src/config\";\n\nclass NewPost extends Component{\n  static contextType = Context;\n  constructor(props){\n    super(props);\n    this.state={\n      error:null,\n      submitDisabled:true,\n      fieldType:'recipe',\n      areTypeSpecificFieldsVisible:{'title':false, 'author':false, 'by':false,'link':false,'content':true},\n      inputs:{\n      title:{value:\"\",touched:false},\n      author:{value:\"\",touched:false},\n      by:{value:\"\",touched:false},\n      link:{value:\"\",touched:false},\n      content:{value:\"\",touched:false},\n      post_image:{value:\"\",touched:false, file:\"\"}},\n      user: this.props.match.params.username\n    }//end of state\n  }\n  //updates the fields displayed depending on the type of post\n  updateFields=(fieldTypeSelected)=>{\n    const {areTypeSpecificFieldsVisible} = this.state;\n    const {inputs} = this.state\n   //first resetting fields to not display\n    Object.keys(areTypeSpecificFieldsVisible).forEach(key => {\n       areTypeSpecificFieldsVisible[key]=false\n    });\n  //resetting any touched input values to false\n    Object.keys(inputs).forEach(key => {\n     inputs[key].touched=false;\n    });\n  //clear values\n    Object.keys(inputs).forEach(key => {\n     inputs[key].value=\"\";\n    });\n    inputs.post_image.file=\"\";\n        if(fieldTypeSelected==='book'){\n            areTypeSpecificFieldsVisible['title']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['content']=true;\n            areTypeSpecificFieldsVisible['link']=true;\n        }\n        else if(fieldTypeSelected==='lifestyle'){\n            areTypeSpecificFieldsVisible['title']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['content']=true;\n        }\n        else if(fieldTypeSelected==='podcast'){\n            areTypeSpecificFieldsVisible['content']=true;\n            areTypeSpecificFieldsVisible['link']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['title']=true;\n        }\n        else if(fieldTypeSelected==='event'){\n            areTypeSpecificFieldsVisible['content']=true;\n            areTypeSpecificFieldsVisible['link']=true;\n            areTypeSpecificFieldsVisible['title']=true;        \n        }\n        else if(fieldTypeSelected==='recipe'){\n           areTypeSpecificFieldsVisible['title']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['content']=true;\n        }\n\n        //clear all form fields \n         this.refs.form.reset();\n\n        this.setState({\n            fieldType:fieldTypeSelected,\n            inputs:inputs,\n            submitDisabled:true,\n            areTypeSpecificFieldsVisible:areTypeSpecificFieldsVisible})\n    }\n\n  updateChange=(inputValue, id)=>{\n    const {inputs} = this.state;\n    //console.log(inputs)\n    \n    if(id!=='post_image'){\n        inputs[id]={value:inputValue,touched:true}\n     }\n     else if(id==='post_image'){\n         console.log(inputValue[0])\n         inputs[id]={file:inputValue[0],touched:true}\n     }\n    this.setState({inputs:inputs})\n    this.checkDisableSubmit();\n  }\n\n  checkDisableSubmit(){\n    console.log(`cDS ${this.state.fieldType} ${this.state.inputs.title.touched} ${this.state.inputs.author.touched} ${this.state.submitDisabled}`)\n    if(this.state.inputs.post_image.touched){\n        this.setState({submitDisabled:false})\n    }\n    else{\n        if(this.state.fieldType === 'lifestyle' || this.state.fieldType === 'event' || this.state.fieldType === 'podcast') {\n        if( this.state.inputs.title.touched && this.state.inputs.link.touched && this.state.submitDisabled)\n        {this.setState({submitDisabled:false})}\n        }\n        else if(this.state.fieldType==='recipe' && this.state.inputs.content.touched && this.state.submitDisabled){\n        console.log(`this recipe if ran `)\n        this.setState({submitDisabled:false})  \n        }\n        else if(this.state.fieldType==='book' && this.state.inputs.title.touched && this.state.inputs.author.touched && this.state.submitDisabled){\n            console.log(`this book if ran `)\n            this.setState({submitDisabled:false})  \n        }  \n    }\n}\n\nvalidateContent(){\n    const content = this.state.inputs.content.value.trim();\n    if (content.length>800){\n        return 'Please keep posts under 800 characters.'\n    } \n}\n\nvalidateLink(){\n    const link = this.state.inputs.link.value;\n    let regexp =  /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n\n    if (!regexp.test(link))\n    {\n        return 'Please enter a valid url'\n    }\n}\n\nhandleSubmit=(e)=>{\n    e.preventDefault();\n    const {inputs, fieldType}=this.state;     \n    \n    let newPostWithImage = {\n        user_id:1,\n        post_type:fieldType,\n        title:inputs.title.value,\n        link:inputs.link.value,\n        content:inputs.content.value,\n        by:inputs.by.value,\n        image_path:''\n    }\n    let url = `${config.API_ENDPOINT}/posts`\n    if(inputs.post_image.file){\n        let formData = new FormData();\n        const fileField = inputs.post_image.file;        \n        formData.append('image', fileField);        \n\n        let image_url = `${config.API_ENDPOINT}/upload`;\n        \n        fetch(image_url, {\n            method: 'POST',\n            body: formData,\n            })\n        .then(res => {\n           return res.json()\n        })\n        .then(res => {\n            newPostWithImage.image_path = res.data.image;\n            console.log(newPostWithImage)\n           return  fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(newPostWithImage),\n                headers: {\n                  'content-type': 'application/json',\n                 // 'authorization': `Bearer ${config.API_KEY}`\n                }\n              })\n        })\n       .then(resp => {\n          if (!resp.ok) {\n          // get the error message from the response,\n            return resp.json().then(error => {\n            // then throw it\n            throw error\n            })\n          }\n           return resp.json()\n        })\n        .then(post => {\n            this.props.history.push('/dashboard')\n            this.context.addPost(newPostWithImage)       \n        })\n        .catch(error => {\n            this.setState({ error })\n        })    \n    }    \nelse if(!inputs.post_image.file){  \n  let newPost = {\n    user_id:1,\n    post_type:fieldType,\n    title:inputs.title.value,\n    link:inputs.link.value,\n    content:inputs.content.value,\n    by:inputs.by.value,\n    image_path:''\n}\nfetch(url, {\n    method: 'POST',\n    body: JSON.stringify(newPost),\n    headers: {\n    'content-type': 'application/json',\n    // 'authorization': `Bearer ${config.API_KEY}`\n    }  \n})\n.then(res => {\n    if (!res.ok) {\n        // get the error message from the response,\n        return res.json().then(error => {\n        // then throw it\n        throw error\n        })\n    }\n    return res.json()\n    })\n    .then(post => {\n      this.props.history.push('/dashboard')\n      this.context.addPost(newPost)    \n    })\n    .catch(error => {\n      this.setState({ error })\n    })\n  }\n}      \n\npostData()\n{\n    console.log(\"Clicked!\")\n    const user = this.props.match.params.username;\n    console.log(user);\n    const {inputs, fieldType}=this.state; \n    //user_id, title, link, start_date,by,content, post_type\n    console.log(BASE_URL+'/posts/'+user);\n    fetch(BASE_URL+'/posts/'+user, {\n      method:'post',\n      headers:{'Content-Type' : 'application/json'},\n      body:JSON.stringify({\n        post_type:fieldType,\n        title:inputs.title.value,\n        link:inputs.link.value,\n        content:inputs.content.value,\n        by:inputs.by.value,\n        image_path:'' \n      })\n    })\n    .then(response=> response.json())\n    .then(response=>{\n        console.log(response)\n      alert(\"Thank you for your post!\");\n      //window.location.href = BASE_URL_FRONTEND+\"/my-account\";\n    })\n    .catch(err => alert(err))\n}\nrender(){\n    const { areTypeSpecificFieldsVisible } = this.state;\n    const contentError = this.validateContent();\n    const linkError = this.validateLink();\n\n    return(\n        <div className=\"new-post form-page\">\n            <header>\n                <Nav pageType={'interior'} user={this.state.user}/>\n                <FilterButtons\n                    buttonInfo={[                    \n                    {aria_label:'my posts',icon_type:faUser, link:`/${this.state.user}/dashboard`, display_change:'user', tooltipMessage:'view all your posts',tooltipClass:'bottom-farright'},\n                    {aria_label:'my account',icon_type:faIdCard, link:'/my-account',display_change:'all', tooltipMessage:'signin to your account',tooltipClass:'bottom-farright'},                    \n                    ]}                \n                />\n            </header>\n            <main>\n            <FilterButtonsForm\n                    updateFields = {this.updateFields}\n                    buttonInfo={[\n                    {aria_label:'fields to create new recipe post',icon_type:faSeedling,field_type:'recipe', tooltipMessage:'create a recipe post',tooltipClass:'bottom-farright'},\n                    {ariaLabel:'fields to create new book post',icon_type:faBookOpen, field_type:'book', tooltipMessage:'create a book post',tooltipClass:'bottom-right'},\n                    {aria_label:'fields to create new podcast post',icon_type:faPodcast,field_type:'podcast', tooltipMessage:'create a podcast post',tooltipClass:'bottom-center'},\n                    {aria_label:'lifestyle posts',icon_type:faHeartbeat, field_type:'lifestyle',tooltipMessage:'create a lifestyle post',tooltipClass:'bottom-left'},\n                    {aria_label:'event posts',icon_type:faCalendarAlt,field_type:'event', tooltipMessage:'create an event post',tooltipClass:'bottom-farleft'}]}\n                />\n\n                <form className=\"new-post-form\" \n                    onSubmit={e=>this.handleSubmit(e)}\n                    ref=\"form\">\n                    <div className=\"form-intro\">\n                        <p>Please use the buttons above to select the type of post you want to create and the form below to share some positivity with others.<FontAwesomeIcon className=\"filter-icon inline-block-icon\" icon={faSmile} /></p>\n                        <h2>Create a new {this.state.fieldType} post</h2>\n                    </div>\n                    <div>\n                        <div className={`form-field-group field-title ${areTypeSpecificFieldsVisible['title'] ? \"\" : \" hidden\"}`}>\n                            <label htmlFor=\"title\">Title*</label>\n                            <input \n                                type=\"text\" name=\"title\" id=\"title\" placeholder=\"A New Beginning\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        <div \n                             className={`form-field-group field-author ${areTypeSpecificFieldsVisible['author'] ? \"\" : \" hidden\"}`}>\n                            <label htmlFor=\"by\">Author</label>\n                            <input \n                                type=\"text\" name=\"by\" id=\"by\" placeholder=\"Maya Angelou\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        <div className={`form-field-group field-doctor ${areTypeSpecificFieldsVisible['doctor'] ? \"\" : \" hidden\"}`}>\n                            <label htmlFor=\"by\">Nutritionist</label>\n                            <input \n                                type=\"text\" name=\"by\" id=\"by\" placeholder=\"Kimberly Snyder\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        \n                        <div className={`form-field-group field-link ${areTypeSpecificFieldsVisible['link'] ? \"\" : \" hidden\"} `}>\n                            <label htmlFor=\"link\">Link*</label>\n                            <input \n                                type=\"url\" name=\"link\" id=\"link\" placeholder=\"http://someamazingsite.com\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        {this.state.inputs.link.touched  && (<ValidationError message={linkError}/>)}\n                        <div className={`form-field-group field-content ${areTypeSpecificFieldsVisible['content'] ? \"\" : \" hidden\"} `}>\n                            <label htmlFor=\"content\">Content*</label>\n                            <textarea\n                                type=\"textarea\" name=\"content\"\n                                id=\"content\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}\n                                />\n                        </div>\n                        {this.state.inputs.content.touched  && (<ValidationError message={contentError}/>)}                        \n                        <div className=\"form-field-group field-img\">\n                            <label htmlFor=\"post-image\">Upload Screenshot</label>\n                            <input\n                                type=\"file\" name=\"post_image\"\n                                accept=\".png,.jpg,.gif.bmp, .jpeg\"\n                                id=\"post_image\"\n                                alt=\"user-uploaded-image\"\n                                onChange={e => this.updateChange(e.target.files, e.target.id)}\n                                />\n                        </div>\n                    </div>\n                        \n                    <div className=\"form-buttons button-row\">    \n                        <button \n                            type=\"button\"\n                            onClick={()=>this.postData()}\n                        >\n                            Post</button>\n                        <button type=\"reset\">Cancel</button>\n                    </div>\n                  \n                </form>\n                \n            </main>\n        </div>\n    )\n}\n}\n\nexport default NewPost;","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/BookmarkPage.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/UserSignUp.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Dashboard.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/MyAccount.js",["112"],"import React, {Component} from 'react';\nimport Nav from './Nav';\nimport UserSignUp from \"./UserSignUp\";\nimport {BASE_URL} from \"../../src/config\";\nimport {BASE_URL_FRONTEND} from \"../../src/config\";\nclass MyAccount extends Component{\n    state = {\n        isBoxVisible:false,\n        username: \"\",\n        password: \"\"\n    }\n    BetaVersionPopUp=(e)=>{\n        e.preventDefault();\n        this.setState({ isBoxVisible: true });\n    }\n    closeWindow=()=>{\n        this.setState({ isBoxVisible: false });\n    } \n    setForm(e)\n   {\n    const {name, value} = e.target;\n    console.log(value);\n    this.setState({\n        [name] : value\n    });\n   }\n    signIn = (e) =>  { \n        e.preventDefault();\n        fetch(BASE_URL+'/users/checkuser/'+this.state.username, {\n          method:'post',\n          headers:{'Content-Type' : 'application/json'},\n          body:JSON.stringify({\n            password: this.state.password \n          })\n        })\n        .then(response=> response.json())\n        .then(response=>{\n            if(response) window.location.href = BASE_URL_FRONTEND+\"/\"+this.state.username+\"/dashboard\";\n        })\n        .catch(err=> alert(err))\n    }   \n    render(){      \n        let signUp = new UserSignUp(); \n        return(\n          <div className=\"account-page\">\n            <Nav pageType={'interior'}/>\n              <div className={`box beta-version-box ${this.state.isBoxVisible ? \"\" : \"hidden\"}`}>\n              <p>Since this is still the Beta version of the app, you cannot update account information. Please check back soon to be able to sign-up and update your account whenever!</p>\n              <button className=\"button\" onClick={this.closeWindow}>Close</button>\n              </div>             \n                <form className=\"update-account-form\" onSubmit={e=>this.signIn(e)}>\n                    <h2>My Account</h2>                    \n                    <p>Please enter your username and password to SignIn.</p>\n                    \n                    <div className=\"form-field-group\">\n                        <label htmlFor=\"username\">UserName</label>\n                        <input placeholder=\"user123\" type=\"username\" name='username' id='username' onChange={(e)=>this.setForm(e)}/>\n                    </div>\n                    <div className=\"form-field-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input placeholder=\"*******\" type=\"password\" name='password' id='password' onChange={(e)=>this.setForm(e)}/>\n                    </div>\n                    <button type=\"submit\">SignIn</button>                    \n                   </form> \n                                                 \n            </div>\n        )\n    }\n}\nexport default MyAccount;","/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Nav.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/ValidationError.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/About.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/FilterButtonsForm.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/FilterButtons.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/ResultList.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/IconButton.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/SinglePost.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/Tooltip.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Functions/FilterResults.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/libraries/fontawesome.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/DeletePost.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/UpdateBookmark.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/AddBookmark.js",[],"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/DeleteBookmark.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":13,"column":9,"nodeType":"119","messageId":"120","endLine":13,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":43,"column":13,"nodeType":"119","messageId":"120","endLine":43,"endColumn":19},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'BASE_URL_FRONTEND' is defined but never used.","Identifier","unusedVar","'signUp' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]