{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/NewPost.js\";\nimport React, { Component } from 'react';\nimport Nav from './Nav';\nimport FilterButtons from './FilterButtons';\nimport FilterButtonsForm from './FilterButtonsForm';\nimport Context from '../Context';\nimport '../_styles/Form.css';\nimport config from '../config';\nimport ValidationError from './ValidationError';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCalendarAlt, faIdCard, faSmile } from '@fortawesome/free-regular-svg-icons';\nimport { faPodcast, faSeedling, faBookOpen, faUser, faHeartbeat } from '@fortawesome/free-solid-svg-icons';\nimport { BASE_URL } from \"../../src/config\";\nimport { BASE_URL_FRONTEND } from \"../../src/config\";\n\nclass NewPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateFields = fieldTypeSelected => {\n      const {\n        areTypeSpecificFieldsVisible\n      } = this.state;\n      const {\n        inputs\n      } = this.state; //first resetting fields to not display\n\n      Object.keys(areTypeSpecificFieldsVisible).forEach(key => {\n        areTypeSpecificFieldsVisible[key] = false;\n      }); //resetting any touched input values to false\n\n      Object.keys(inputs).forEach(key => {\n        inputs[key].touched = false;\n      }); //clear values\n\n      Object.keys(inputs).forEach(key => {\n        inputs[key].value = \"\";\n      });\n      inputs.post_image.file = \"\";\n\n      if (fieldTypeSelected === 'book') {\n        areTypeSpecificFieldsVisible['title'] = true;\n        areTypeSpecificFieldsVisible['by'] = true;\n        areTypeSpecificFieldsVisible['content'] = true;\n        areTypeSpecificFieldsVisible['link'] = true;\n      } else if (fieldTypeSelected === 'lifestyle') {\n        areTypeSpecificFieldsVisible['title'] = true;\n        areTypeSpecificFieldsVisible['by'] = true;\n        areTypeSpecificFieldsVisible['content'] = true;\n      } else if (fieldTypeSelected === 'podcast') {\n        areTypeSpecificFieldsVisible['content'] = true;\n        areTypeSpecificFieldsVisible['link'] = true;\n        areTypeSpecificFieldsVisible['by'] = true;\n        areTypeSpecificFieldsVisible['title'] = true;\n      } else if (fieldTypeSelected === 'event') {\n        areTypeSpecificFieldsVisible['content'] = true;\n        areTypeSpecificFieldsVisible['link'] = true;\n        areTypeSpecificFieldsVisible['title'] = true;\n      } else if (fieldTypeSelected === 'recipe') {\n        areTypeSpecificFieldsVisible['title'] = true;\n        areTypeSpecificFieldsVisible['by'] = true;\n        areTypeSpecificFieldsVisible['content'] = true;\n      } //clear all form fields \n\n\n      this.refs.form.reset();\n      this.setState({\n        fieldType: fieldTypeSelected,\n        inputs: inputs,\n        submitDisabled: true,\n        areTypeSpecificFieldsVisible: areTypeSpecificFieldsVisible\n      });\n    };\n\n    this.updateChange = (inputValue, id) => {\n      const {\n        inputs\n      } = this.state; //console.log(inputs)\n\n      if (id !== 'post_image') {\n        inputs[id] = {\n          value: inputValue,\n          touched: true\n        };\n      } else if (id === 'post_image') {\n        console.log(inputValue[0]);\n        inputs[id] = {\n          file: inputValue[0],\n          touched: true\n        };\n      }\n\n      this.setState({\n        inputs: inputs\n      });\n      this.checkDisableSubmit();\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const {\n        inputs,\n        fieldType\n      } = this.state;\n      let newPostWithImage = {\n        user_id: 1,\n        post_type: fieldType,\n        title: inputs.title.value,\n        link: inputs.link.value,\n        content: inputs.content.value,\n        by: inputs.by.value,\n        image_path: ''\n      };\n      let url = `${config.API_ENDPOINT}/posts`;\n\n      if (inputs.post_image.file) {\n        let formData = new FormData();\n        const fileField = inputs.post_image.file;\n        formData.append('image', fileField);\n        let image_url = `${config.API_ENDPOINT}/upload`;\n        fetch(image_url, {\n          method: 'POST',\n          body: formData\n        }).then(res => {\n          return res.json();\n        }).then(res => {\n          newPostWithImage.image_path = res.data.image;\n          console.log(newPostWithImage);\n          return fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(newPostWithImage),\n            headers: {\n              'content-type': 'application/json' // 'authorization': `Bearer ${config.API_KEY}`\n\n            }\n          });\n        }).then(resp => {\n          if (!resp.ok) {\n            // get the error message from the response,\n            return resp.json().then(error => {\n              // then throw it\n              throw error;\n            });\n          }\n\n          return resp.json();\n        }).then(post => {\n          this.props.history.push('/dashboard');\n          this.context.addPost(newPostWithImage);\n        }).catch(error => {\n          this.setState({\n            error\n          });\n        });\n      } else if (!inputs.post_image.file) {\n        let newPost = {\n          user_id: 1,\n          post_type: fieldType,\n          title: inputs.title.value,\n          link: inputs.link.value,\n          content: inputs.content.value,\n          by: inputs.by.value,\n          image_path: ''\n        };\n        fetch(url, {\n          method: 'POST',\n          body: JSON.stringify(newPost),\n          headers: {\n            'content-type': 'application/json' // 'authorization': `Bearer ${config.API_KEY}`\n\n          }\n        }).then(res => {\n          if (!res.ok) {\n            // get the error message from the response,\n            return res.json().then(error => {\n              // then throw it\n              throw error;\n            });\n          }\n\n          return res.json();\n        }).then(post => {\n          this.props.history.push('/dashboard');\n          this.context.addPost(newPost);\n        }).catch(error => {\n          this.setState({\n            error\n          });\n        });\n      }\n    };\n\n    this.state = {\n      error: null,\n      submitDisabled: true,\n      fieldType: 'recipe',\n      areTypeSpecificFieldsVisible: {\n        'title': false,\n        'author': false,\n        'by': false,\n        'link': false,\n        'content': true\n      },\n      inputs: {\n        title: {\n          value: \"\",\n          touched: false\n        },\n        author: {\n          value: \"\",\n          touched: false\n        },\n        by: {\n          value: \"\",\n          touched: false\n        },\n        link: {\n          value: \"\",\n          touched: false\n        },\n        content: {\n          value: \"\",\n          touched: false\n        },\n        post_image: {\n          value: \"\",\n          touched: false,\n          file: \"\"\n        }\n      },\n      user: this.props.match.params.username\n    }; //end of state\n  } //updates the fields displayed depending on the type of post\n\n\n  checkDisableSubmit() {\n    console.log(`cDS ${this.state.fieldType} ${this.state.inputs.title.touched} ${this.state.inputs.author.touched} ${this.state.submitDisabled}`);\n\n    if (this.state.inputs.post_image.touched) {\n      this.setState({\n        submitDisabled: false\n      });\n    } else {\n      if (this.state.fieldType === 'lifestyle' || this.state.fieldType === 'event' || this.state.fieldType === 'podcast') {\n        if (this.state.inputs.title.touched && this.state.inputs.link.touched && this.state.submitDisabled) {\n          this.setState({\n            submitDisabled: false\n          });\n        }\n      } else if (this.state.fieldType === 'recipe' && this.state.inputs.content.touched && this.state.submitDisabled) {\n        console.log(`this recipe if ran `);\n        this.setState({\n          submitDisabled: false\n        });\n      } else if (this.state.fieldType === 'book' && this.state.inputs.title.touched && this.state.inputs.author.touched && this.state.submitDisabled) {\n        console.log(`this book if ran `);\n        this.setState({\n          submitDisabled: false\n        });\n      }\n    }\n  }\n\n  validateContent() {\n    const content = this.state.inputs.content.value.trim();\n\n    if (content.length > 800) {\n      return 'Please keep posts under 800 characters.';\n    }\n  }\n\n  validateLink() {\n    const link = this.state.inputs.link.value;\n    let regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n\n    if (!regexp.test(link)) {\n      return 'Please enter a valid url';\n    }\n  }\n\n  postData() {\n    console.log(\"Clicked!\");\n    const user = this.props.match.params.username;\n    console.log(user);\n    const {\n      inputs,\n      fieldType\n    } = this.state; //user_id, title, link, start_date,by,content, post_type\n\n    console.log(BASE_URL + '/posts/' + user);\n    fetch(BASE_URL + '/posts/' + user, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        post_type: fieldType,\n        title: inputs.title.value,\n        link: inputs.link.value,\n        content: inputs.content.value,\n        by: inputs.by.value,\n        image_path: ''\n      })\n    }).then(response => response.json()).then(response => {\n      console.log(response);\n      alert(\"Thank you for your post!\"); //window.location.href = BASE_URL_FRONTEND+\"/my-account\";\n    }).catch(err => alert(err));\n  }\n\n  render() {\n    const {\n      areTypeSpecificFieldsVisible\n    } = this.state;\n    const contentError = this.validateContent();\n    const linkError = this.validateLink();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-post form-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(Nav, {\n          pageType: 'interior',\n          user: this.state.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(FilterButtons, {\n          buttonInfo: [{\n            aria_label: 'my posts',\n            icon_type: faUser,\n            link: `/${this.state.user}/dashboard`,\n            display_change: 'user',\n            tooltipMessage: 'view all your posts',\n            tooltipClass: 'bottom-farright'\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(FilterButtonsForm, {\n          updateFields: this.updateFields,\n          buttonInfo: [{\n            aria_label: 'fields to create new recipe post',\n            icon_type: faSeedling,\n            field_type: 'recipe',\n            tooltipMessage: 'create a recipe post',\n            tooltipClass: 'bottom-farright'\n          }, {\n            ariaLabel: 'fields to create new book post',\n            icon_type: faBookOpen,\n            field_type: 'book',\n            tooltipMessage: 'create a book post',\n            tooltipClass: 'bottom-right'\n          }, {\n            aria_label: 'fields to create new podcast post',\n            icon_type: faPodcast,\n            field_type: 'podcast',\n            tooltipMessage: 'create a podcast post',\n            tooltipClass: 'bottom-center'\n          }, {\n            aria_label: 'lifestyle posts',\n            icon_type: faHeartbeat,\n            field_type: 'lifestyle',\n            tooltipMessage: 'create a lifestyle post',\n            tooltipClass: 'bottom-left'\n          }, {\n            aria_label: 'event posts',\n            icon_type: faCalendarAlt,\n            field_type: 'event',\n            tooltipMessage: 'create an event post',\n            tooltipClass: 'bottom-farleft'\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"new-post-form\",\n          onSubmit: e => this.handleSubmit(e),\n          ref: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-intro\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Please use the buttons above to select the type of post you want to create and the form below to share some positivity with others.\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                className: \"filter-icon inline-block-icon\",\n                icon: faSmile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 159\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Create a new \", this.state.fieldType, \" post\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `form-field-group field-title ${areTypeSpecificFieldsVisible['title'] ? \"\" : \" hidden\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"title\",\n                children: \"Title*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"title\",\n                id: \"title\",\n                placeholder: \"A New Beginning\",\n                onChange: e => this.updateChange(e.target.value, e.target.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `form-field-group field-author ${areTypeSpecificFieldsVisible['author'] ? \"\" : \" hidden\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"by\",\n                children: \"Author\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"by\",\n                id: \"by\",\n                placeholder: \"Maya Angelou\",\n                onChange: e => this.updateChange(e.target.value, e.target.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `form-field-group field-doctor ${areTypeSpecificFieldsVisible['doctor'] ? \"\" : \" hidden\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"by\",\n                children: \"Nutritionist\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"by\",\n                id: \"by\",\n                placeholder: \"Kimberly Snyder\",\n                onChange: e => this.updateChange(e.target.value, e.target.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `form-field-group field-link ${areTypeSpecificFieldsVisible['link'] ? \"\" : \" hidden\"} `,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"link\",\n                children: \"Link*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"url\",\n                name: \"link\",\n                id: \"link\",\n                placeholder: \"http://someamazingsite.com\",\n                onChange: e => this.updateChange(e.target.value, e.target.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 25\n            }, this), this.state.inputs.link.touched && /*#__PURE__*/_jsxDEV(ValidationError, {\n              message: linkError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 62\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `form-field-group field-content ${areTypeSpecificFieldsVisible['content'] ? \"\" : \" hidden\"} `,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"content\",\n                children: \"Content*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                type: \"textarea\",\n                name: \"content\",\n                id: \"content\",\n                onChange: e => this.updateChange(e.target.value, e.target.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 25\n            }, this), this.state.inputs.content.touched && /*#__PURE__*/_jsxDEV(ValidationError, {\n              message: contentError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 65\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-field-group field-img\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"post-image\",\n                children: \"Upload Screenshot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                name: \"post_image\",\n                accept: \".png,.jpg,.gif.bmp, .jpeg\",\n                id: \"post_image\",\n                alt: \"user-uploaded-image\",\n                onChange: e => this.updateChange(e.target.files, e.target.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-buttons button-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => this.postData(),\n              children: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"reset\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nNewPost.contextType = Context;\nexport default NewPost;","map":{"version":3,"sources":["/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/NewPost.js"],"names":["React","Component","Nav","FilterButtons","FilterButtonsForm","Context","config","ValidationError","FontAwesomeIcon","faCalendarAlt","faIdCard","faSmile","faPodcast","faSeedling","faBookOpen","faUser","faHeartbeat","BASE_URL","BASE_URL_FRONTEND","NewPost","constructor","props","updateFields","fieldTypeSelected","areTypeSpecificFieldsVisible","state","inputs","Object","keys","forEach","key","touched","value","post_image","file","refs","form","reset","setState","fieldType","submitDisabled","updateChange","inputValue","id","console","log","checkDisableSubmit","handleSubmit","e","preventDefault","newPostWithImage","user_id","post_type","title","link","content","by","image_path","url","API_ENDPOINT","formData","FormData","fileField","append","image_url","fetch","method","body","then","res","json","data","image","JSON","stringify","headers","resp","ok","error","post","history","push","context","addPost","catch","newPost","author","user","match","params","username","validateContent","trim","length","validateLink","regexp","test","postData","response","alert","err","render","contentError","linkError","aria_label","icon_type","display_change","tooltipMessage","tooltipClass","field_type","ariaLabel","target","files","contextType"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,qBAAP;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,OAAlC,QAAkD,qCAAlD;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,UAAhC,EAA2CC,MAA3C,EAAmDC,WAAnD,QAAqE,mCAArE;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,iBAAR,QAAgC,kBAAhC;;AAEA,MAAMC,OAAN,SAAsBlB,SAAtB,CAA+B;AAE7BmB,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAkBlBC,YAlBkB,GAkBJC,iBAAD,IAAqB;AAChC,YAAM;AAACC,QAAAA;AAAD,UAAiC,KAAKC,KAA5C;AACA,YAAM;AAACC,QAAAA;AAAD,UAAW,KAAKD,KAAtB,CAFgC,CAGjC;;AACCE,MAAAA,MAAM,CAACC,IAAP,CAAYJ,4BAAZ,EAA0CK,OAA1C,CAAkDC,GAAG,IAAI;AACtDN,QAAAA,4BAA4B,CAACM,GAAD,CAA5B,GAAkC,KAAlC;AACF,OAFD,EAJgC,CAOlC;;AACEH,MAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4BC,GAAG,IAAI;AAClCJ,QAAAA,MAAM,CAACI,GAAD,CAAN,CAAYC,OAAZ,GAAoB,KAApB;AACA,OAFD,EARgC,CAWlC;;AACEJ,MAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4BC,GAAG,IAAI;AAClCJ,QAAAA,MAAM,CAACI,GAAD,CAAN,CAAYE,KAAZ,GAAkB,EAAlB;AACA,OAFD;AAGAN,MAAAA,MAAM,CAACO,UAAP,CAAkBC,IAAlB,GAAuB,EAAvB;;AACI,UAAGX,iBAAiB,KAAG,MAAvB,EAA8B;AAC1BC,QAAAA,4BAA4B,CAAC,OAAD,CAA5B,GAAsC,IAAtC;AACAA,QAAAA,4BAA4B,CAAC,IAAD,CAA5B,GAAmC,IAAnC;AACAA,QAAAA,4BAA4B,CAAC,SAAD,CAA5B,GAAwC,IAAxC;AACAA,QAAAA,4BAA4B,CAAC,MAAD,CAA5B,GAAqC,IAArC;AACH,OALD,MAMK,IAAGD,iBAAiB,KAAG,WAAvB,EAAmC;AACpCC,QAAAA,4BAA4B,CAAC,OAAD,CAA5B,GAAsC,IAAtC;AACAA,QAAAA,4BAA4B,CAAC,IAAD,CAA5B,GAAmC,IAAnC;AACAA,QAAAA,4BAA4B,CAAC,SAAD,CAA5B,GAAwC,IAAxC;AACH,OAJI,MAKA,IAAGD,iBAAiB,KAAG,SAAvB,EAAiC;AAClCC,QAAAA,4BAA4B,CAAC,SAAD,CAA5B,GAAwC,IAAxC;AACAA,QAAAA,4BAA4B,CAAC,MAAD,CAA5B,GAAqC,IAArC;AACAA,QAAAA,4BAA4B,CAAC,IAAD,CAA5B,GAAmC,IAAnC;AACAA,QAAAA,4BAA4B,CAAC,OAAD,CAA5B,GAAsC,IAAtC;AACH,OALI,MAMA,IAAGD,iBAAiB,KAAG,OAAvB,EAA+B;AAChCC,QAAAA,4BAA4B,CAAC,SAAD,CAA5B,GAAwC,IAAxC;AACAA,QAAAA,4BAA4B,CAAC,MAAD,CAA5B,GAAqC,IAArC;AACAA,QAAAA,4BAA4B,CAAC,OAAD,CAA5B,GAAsC,IAAtC;AACH,OAJI,MAKA,IAAGD,iBAAiB,KAAG,QAAvB,EAAgC;AAClCC,QAAAA,4BAA4B,CAAC,OAAD,CAA5B,GAAsC,IAAtC;AACCA,QAAAA,4BAA4B,CAAC,IAAD,CAA5B,GAAmC,IAAnC;AACAA,QAAAA,4BAA4B,CAAC,SAAD,CAA5B,GAAwC,IAAxC;AACH,OA1C2B,CA4C5B;;;AACC,WAAKW,IAAL,CAAUC,IAAV,CAAeC,KAAf;AAED,WAAKC,QAAL,CAAc;AACVC,QAAAA,SAAS,EAAChB,iBADA;AAEVG,QAAAA,MAAM,EAACA,MAFG;AAGVc,QAAAA,cAAc,EAAC,IAHL;AAIVhB,QAAAA,4BAA4B,EAACA;AAJnB,OAAd;AAKH,KAtEe;;AAAA,SAwElBiB,YAxEkB,GAwEL,CAACC,UAAD,EAAaC,EAAb,KAAkB;AAC7B,YAAM;AAACjB,QAAAA;AAAD,UAAW,KAAKD,KAAtB,CAD6B,CAE7B;;AAEA,UAAGkB,EAAE,KAAG,YAAR,EAAqB;AACjBjB,QAAAA,MAAM,CAACiB,EAAD,CAAN,GAAW;AAACX,UAAAA,KAAK,EAACU,UAAP;AAAkBX,UAAAA,OAAO,EAAC;AAA1B,SAAX;AACF,OAFF,MAGM,IAAGY,EAAE,KAAG,YAAR,EAAqB;AACtBC,QAAAA,OAAO,CAACC,GAAR,CAAYH,UAAU,CAAC,CAAD,CAAtB;AACAhB,QAAAA,MAAM,CAACiB,EAAD,CAAN,GAAW;AAACT,UAAAA,IAAI,EAACQ,UAAU,CAAC,CAAD,CAAhB;AAAoBX,UAAAA,OAAO,EAAC;AAA5B,SAAX;AACH;;AACF,WAAKO,QAAL,CAAc;AAACZ,QAAAA,MAAM,EAACA;AAAR,OAAd;AACA,WAAKoB,kBAAL;AACD,KArFiB;;AAAA,SA6HpBC,YA7HoB,GA6HNC,CAAD,IAAK;AACdA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAM;AAACvB,QAAAA,MAAD;AAASa,QAAAA;AAAT,UAAoB,KAAKd,KAA/B;AAEA,UAAIyB,gBAAgB,GAAG;AACnBC,QAAAA,OAAO,EAAC,CADW;AAEnBC,QAAAA,SAAS,EAACb,SAFS;AAGnBc,QAAAA,KAAK,EAAC3B,MAAM,CAAC2B,KAAP,CAAarB,KAHA;AAInBsB,QAAAA,IAAI,EAAC5B,MAAM,CAAC4B,IAAP,CAAYtB,KAJE;AAKnBuB,QAAAA,OAAO,EAAC7B,MAAM,CAAC6B,OAAP,CAAevB,KALJ;AAMnBwB,QAAAA,EAAE,EAAC9B,MAAM,CAAC8B,EAAP,CAAUxB,KANM;AAOnByB,QAAAA,UAAU,EAAC;AAPQ,OAAvB;AASA,UAAIC,GAAG,GAAI,GAAEpD,MAAM,CAACqD,YAAa,QAAjC;;AACA,UAAGjC,MAAM,CAACO,UAAP,CAAkBC,IAArB,EAA0B;AACtB,YAAI0B,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACA,cAAMC,SAAS,GAAGpC,MAAM,CAACO,UAAP,CAAkBC,IAApC;AACA0B,QAAAA,QAAQ,CAACG,MAAT,CAAgB,OAAhB,EAAyBD,SAAzB;AAEA,YAAIE,SAAS,GAAI,GAAE1D,MAAM,CAACqD,YAAa,SAAvC;AAEAM,QAAAA,KAAK,CAACD,SAAD,EAAY;AACbE,UAAAA,MAAM,EAAE,MADK;AAEbC,UAAAA,IAAI,EAAEP;AAFO,SAAZ,CAAL,CAICQ,IAJD,CAIMC,GAAG,IAAI;AACV,iBAAOA,GAAG,CAACC,IAAJ,EAAP;AACF,SAND,EAOCF,IAPD,CAOMC,GAAG,IAAI;AACTnB,UAAAA,gBAAgB,CAACO,UAAjB,GAA8BY,GAAG,CAACE,IAAJ,CAASC,KAAvC;AACA5B,UAAAA,OAAO,CAACC,GAAR,CAAYK,gBAAZ;AACD,iBAAQe,KAAK,CAACP,GAAD,EAAM;AACdQ,YAAAA,MAAM,EAAE,MADM;AAEdC,YAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAexB,gBAAf,CAFQ;AAGdyB,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT,CAER;;AAFQ;AAHK,WAAN,CAAb;AAQF,SAlBD,EAmBAP,IAnBA,CAmBKQ,IAAI,IAAI;AACX,cAAI,CAACA,IAAI,CAACC,EAAV,EAAc;AACd;AACE,mBAAOD,IAAI,CAACN,IAAL,GAAYF,IAAZ,CAAiBU,KAAK,IAAI;AACjC;AACA,oBAAMA,KAAN;AACC,aAHM,CAAP;AAID;;AACA,iBAAOF,IAAI,CAACN,IAAL,EAAP;AACF,SA5BD,EA6BCF,IA7BD,CA6BMW,IAAI,IAAI;AACV,eAAK1D,KAAL,CAAW2D,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACA,eAAKC,OAAL,CAAaC,OAAb,CAAqBjC,gBAArB;AACH,SAhCD,EAiCCkC,KAjCD,CAiCON,KAAK,IAAI;AACZ,eAAKxC,QAAL,CAAc;AAAEwC,YAAAA;AAAF,WAAd;AACH,SAnCD;AAoCH,OA3CD,MA4CC,IAAG,CAACpD,MAAM,CAACO,UAAP,CAAkBC,IAAtB,EAA2B;AAC9B,YAAImD,OAAO,GAAG;AACZlC,UAAAA,OAAO,EAAC,CADI;AAEZC,UAAAA,SAAS,EAACb,SAFE;AAGZc,UAAAA,KAAK,EAAC3B,MAAM,CAAC2B,KAAP,CAAarB,KAHP;AAIZsB,UAAAA,IAAI,EAAC5B,MAAM,CAAC4B,IAAP,CAAYtB,KAJL;AAKZuB,UAAAA,OAAO,EAAC7B,MAAM,CAAC6B,OAAP,CAAevB,KALX;AAMZwB,UAAAA,EAAE,EAAC9B,MAAM,CAAC8B,EAAP,CAAUxB,KAND;AAOZyB,UAAAA,UAAU,EAAC;AAPC,SAAd;AASFQ,QAAAA,KAAK,CAACP,GAAD,EAAM;AACPQ,UAAAA,MAAM,EAAE,MADD;AAEPC,UAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAeW,OAAf,CAFC;AAGPV,UAAAA,OAAO,EAAE;AACT,4BAAgB,kBADP,CAET;;AAFS;AAHF,SAAN,CAAL,CAQCP,IARD,CAQMC,GAAG,IAAI;AACT,cAAI,CAACA,GAAG,CAACQ,EAAT,EAAa;AACT;AACA,mBAAOR,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgBU,KAAK,IAAI;AAChC;AACA,oBAAMA,KAAN;AACC,aAHM,CAAP;AAIH;;AACD,iBAAOT,GAAG,CAACC,IAAJ,EAAP;AACC,SAjBL,EAkBKF,IAlBL,CAkBUW,IAAI,IAAI;AACZ,eAAK1D,KAAL,CAAW2D,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACA,eAAKC,OAAL,CAAaC,OAAb,CAAqBE,OAArB;AACD,SArBL,EAsBKD,KAtBL,CAsBWN,KAAK,IAAI;AACd,eAAKxC,QAAL,CAAc;AAAEwC,YAAAA;AAAF,WAAd;AACD,SAxBL;AAyBG;AACF,KA3NmB;;AAEhB,SAAKrD,KAAL,GAAW;AACTqD,MAAAA,KAAK,EAAC,IADG;AAETtC,MAAAA,cAAc,EAAC,IAFN;AAGTD,MAAAA,SAAS,EAAC,QAHD;AAITf,MAAAA,4BAA4B,EAAC;AAAC,iBAAQ,KAAT;AAAgB,kBAAS,KAAzB;AAAgC,cAAK,KAArC;AAA2C,gBAAO,KAAlD;AAAwD,mBAAU;AAAlE,OAJpB;AAKTE,MAAAA,MAAM,EAAC;AACP2B,QAAAA,KAAK,EAAC;AAACrB,UAAAA,KAAK,EAAC,EAAP;AAAUD,UAAAA,OAAO,EAAC;AAAlB,SADC;AAEPuD,QAAAA,MAAM,EAAC;AAACtD,UAAAA,KAAK,EAAC,EAAP;AAAUD,UAAAA,OAAO,EAAC;AAAlB,SAFA;AAGPyB,QAAAA,EAAE,EAAC;AAACxB,UAAAA,KAAK,EAAC,EAAP;AAAUD,UAAAA,OAAO,EAAC;AAAlB,SAHI;AAIPuB,QAAAA,IAAI,EAAC;AAACtB,UAAAA,KAAK,EAAC,EAAP;AAAUD,UAAAA,OAAO,EAAC;AAAlB,SAJE;AAKPwB,QAAAA,OAAO,EAAC;AAACvB,UAAAA,KAAK,EAAC,EAAP;AAAUD,UAAAA,OAAO,EAAC;AAAlB,SALD;AAMPE,QAAAA,UAAU,EAAC;AAACD,UAAAA,KAAK,EAAC,EAAP;AAAUD,UAAAA,OAAO,EAAC,KAAlB;AAAyBG,UAAAA,IAAI,EAAC;AAA9B;AANJ,OALE;AAYTqD,MAAAA,IAAI,EAAE,KAAKlE,KAAL,CAAWmE,KAAX,CAAiBC,MAAjB,CAAwBC;AAZrB,KAAX,CAFgB,CAef;AACF,GAlB4B,CAmB7B;;;AAsEA5C,EAAAA,kBAAkB,GAAE;AAClBF,IAAAA,OAAO,CAACC,GAAR,CAAa,OAAM,KAAKpB,KAAL,CAAWc,SAAU,IAAG,KAAKd,KAAL,CAAWC,MAAX,CAAkB2B,KAAlB,CAAwBtB,OAAQ,IAAG,KAAKN,KAAL,CAAWC,MAAX,CAAkB4D,MAAlB,CAAyBvD,OAAQ,IAAG,KAAKN,KAAL,CAAWe,cAAe,EAA5I;;AACA,QAAG,KAAKf,KAAL,CAAWC,MAAX,CAAkBO,UAAlB,CAA6BF,OAAhC,EAAwC;AACpC,WAAKO,QAAL,CAAc;AAACE,QAAAA,cAAc,EAAC;AAAhB,OAAd;AACH,KAFD,MAGI;AACA,UAAG,KAAKf,KAAL,CAAWc,SAAX,KAAyB,WAAzB,IAAwC,KAAKd,KAAL,CAAWc,SAAX,KAAyB,OAAjE,IAA4E,KAAKd,KAAL,CAAWc,SAAX,KAAyB,SAAxG,EAAmH;AACnH,YAAI,KAAKd,KAAL,CAAWC,MAAX,CAAkB2B,KAAlB,CAAwBtB,OAAxB,IAAmC,KAAKN,KAAL,CAAWC,MAAX,CAAkB4B,IAAlB,CAAuBvB,OAA1D,IAAqE,KAAKN,KAAL,CAAWe,cAApF,EACA;AAAC,eAAKF,QAAL,CAAc;AAACE,YAAAA,cAAc,EAAC;AAAhB,WAAd;AAAsC;AACtC,OAHD,MAIK,IAAG,KAAKf,KAAL,CAAWc,SAAX,KAAuB,QAAvB,IAAmC,KAAKd,KAAL,CAAWC,MAAX,CAAkB6B,OAAlB,CAA0BxB,OAA7D,IAAwE,KAAKN,KAAL,CAAWe,cAAtF,EAAqG;AAC1GI,QAAAA,OAAO,CAACC,GAAR,CAAa,qBAAb;AACA,aAAKP,QAAL,CAAc;AAACE,UAAAA,cAAc,EAAC;AAAhB,SAAd;AACC,OAHI,MAIA,IAAG,KAAKf,KAAL,CAAWc,SAAX,KAAuB,MAAvB,IAAiC,KAAKd,KAAL,CAAWC,MAAX,CAAkB2B,KAAlB,CAAwBtB,OAAzD,IAAoE,KAAKN,KAAL,CAAWC,MAAX,CAAkB4D,MAAlB,CAAyBvD,OAA7F,IAAwG,KAAKN,KAAL,CAAWe,cAAtH,EAAqI;AACtII,QAAAA,OAAO,CAACC,GAAR,CAAa,mBAAb;AACA,aAAKP,QAAL,CAAc;AAACE,UAAAA,cAAc,EAAC;AAAhB,SAAd;AACH;AACJ;AACJ;;AAEDmD,EAAAA,eAAe,GAAE;AACb,UAAMpC,OAAO,GAAG,KAAK9B,KAAL,CAAWC,MAAX,CAAkB6B,OAAlB,CAA0BvB,KAA1B,CAAgC4D,IAAhC,EAAhB;;AACA,QAAIrC,OAAO,CAACsC,MAAR,GAAe,GAAnB,EAAuB;AACnB,aAAO,yCAAP;AACH;AACJ;;AAEDC,EAAAA,YAAY,GAAE;AACV,UAAMxC,IAAI,GAAG,KAAK7B,KAAL,CAAWC,MAAX,CAAkB4B,IAAlB,CAAuBtB,KAApC;AACA,QAAI+D,MAAM,GAAI,8aAAd;;AAEA,QAAI,CAACA,MAAM,CAACC,IAAP,CAAY1C,IAAZ,CAAL,EACA;AACI,aAAO,0BAAP;AACH;AACJ;;AAkGD2C,EAAAA,QAAQ,GACR;AACIrD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAM0C,IAAI,GAAG,KAAKlE,KAAL,CAAWmE,KAAX,CAAiBC,MAAjB,CAAwBC,QAArC;AACA9C,IAAAA,OAAO,CAACC,GAAR,CAAY0C,IAAZ;AACA,UAAM;AAAC7D,MAAAA,MAAD;AAASa,MAAAA;AAAT,QAAoB,KAAKd,KAA/B,CAJJ,CAKI;;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAY5B,QAAQ,GAAC,SAAT,GAAmBsE,IAA/B;AACAtB,IAAAA,KAAK,CAAChD,QAAQ,GAAC,SAAT,GAAmBsE,IAApB,EAA0B;AAC7BrB,MAAAA,MAAM,EAAC,MADsB;AAE7BS,MAAAA,OAAO,EAAC;AAAC,wBAAiB;AAAlB,OAFqB;AAG7BR,MAAAA,IAAI,EAACM,IAAI,CAACC,SAAL,CAAe;AAClBtB,QAAAA,SAAS,EAACb,SADQ;AAElBc,QAAAA,KAAK,EAAC3B,MAAM,CAAC2B,KAAP,CAAarB,KAFD;AAGlBsB,QAAAA,IAAI,EAAC5B,MAAM,CAAC4B,IAAP,CAAYtB,KAHC;AAIlBuB,QAAAA,OAAO,EAAC7B,MAAM,CAAC6B,OAAP,CAAevB,KAJL;AAKlBwB,QAAAA,EAAE,EAAC9B,MAAM,CAAC8B,EAAP,CAAUxB,KALK;AAMlByB,QAAAA,UAAU,EAAC;AANO,OAAf;AAHwB,KAA1B,CAAL,CAYCW,IAZD,CAYM8B,QAAQ,IAAGA,QAAQ,CAAC5B,IAAT,EAZjB,EAaCF,IAbD,CAaM8B,QAAQ,IAAE;AACZtD,MAAAA,OAAO,CAACC,GAAR,CAAYqD,QAAZ;AACFC,MAAAA,KAAK,CAAC,0BAAD,CAAL,CAFc,CAGd;AACD,KAjBD,EAkBCf,KAlBD,CAkBOgB,GAAG,IAAID,KAAK,CAACC,GAAD,CAlBnB;AAmBH;;AACDC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAE7E,MAAAA;AAAF,QAAmC,KAAKC,KAA9C;AACA,UAAM6E,YAAY,GAAG,KAAKX,eAAL,EAArB;AACA,UAAMY,SAAS,GAAG,KAAKT,YAAL,EAAlB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACI;AAAA,gCACI,QAAC,GAAD;AAAK,UAAA,QAAQ,EAAE,UAAf;AAA2B,UAAA,IAAI,EAAE,KAAKrE,KAAL,CAAW8D;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AACI,UAAA,UAAU,EAAE,CACZ;AAACiB,YAAAA,UAAU,EAAC,UAAZ;AAAuBC,YAAAA,SAAS,EAAC1F,MAAjC;AAAyCuC,YAAAA,IAAI,EAAE,IAAG,KAAK7B,KAAL,CAAW8D,IAAK,YAAlE;AAA+EmB,YAAAA,cAAc,EAAC,MAA9F;AAAsGC,YAAAA,cAAc,EAAC,qBAArH;AAA2IC,YAAAA,YAAY,EAAC;AAAxJ,WADY;AADhB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAA,gCACA,QAAC,iBAAD;AACQ,UAAA,YAAY,EAAI,KAAKtF,YAD7B;AAEQ,UAAA,UAAU,EAAE,CACZ;AAACkF,YAAAA,UAAU,EAAC,kCAAZ;AAA+CC,YAAAA,SAAS,EAAC5F,UAAzD;AAAoEgG,YAAAA,UAAU,EAAC,QAA/E;AAAyFF,YAAAA,cAAc,EAAC,sBAAxG;AAA+HC,YAAAA,YAAY,EAAC;AAA5I,WADY,EAEZ;AAACE,YAAAA,SAAS,EAAC,gCAAX;AAA4CL,YAAAA,SAAS,EAAC3F,UAAtD;AAAkE+F,YAAAA,UAAU,EAAC,MAA7E;AAAqFF,YAAAA,cAAc,EAAC,oBAApG;AAAyHC,YAAAA,YAAY,EAAC;AAAtI,WAFY,EAGZ;AAACJ,YAAAA,UAAU,EAAC,mCAAZ;AAAgDC,YAAAA,SAAS,EAAC7F,SAA1D;AAAoEiG,YAAAA,UAAU,EAAC,SAA/E;AAA0FF,YAAAA,cAAc,EAAC,uBAAzG;AAAiIC,YAAAA,YAAY,EAAC;AAA9I,WAHY,EAIZ;AAACJ,YAAAA,UAAU,EAAC,iBAAZ;AAA8BC,YAAAA,SAAS,EAACzF,WAAxC;AAAqD6F,YAAAA,UAAU,EAAC,WAAhE;AAA4EF,YAAAA,cAAc,EAAC,yBAA3F;AAAqHC,YAAAA,YAAY,EAAC;AAAlI,WAJY,EAKZ;AAACJ,YAAAA,UAAU,EAAC,aAAZ;AAA0BC,YAAAA,SAAS,EAAChG,aAApC;AAAkDoG,YAAAA,UAAU,EAAC,OAA7D;AAAsEF,YAAAA,cAAc,EAAC,sBAArF;AAA4GC,YAAAA,YAAY,EAAC;AAAzH,WALY;AAFpB;AAAA;AAAA;AAAA;AAAA,gBADA,eAWI;AAAM,UAAA,SAAS,EAAC,eAAhB;AACI,UAAA,QAAQ,EAAE5D,CAAC,IAAE,KAAKD,YAAL,CAAkBC,CAAlB,CADjB;AAEI,UAAA,GAAG,EAAC,MAFR;AAAA,kCAGI;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACI;AAAA,6KAAsI,QAAC,eAAD;AAAiB,gBAAA,SAAS,EAAC,+BAA3B;AAA2D,gBAAA,IAAI,EAAErC;AAAjE;AAAA;AAAA;AAAA;AAAA,sBAAtI;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA,0CAAkB,KAAKc,KAAL,CAAWc,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAOI;AAAA,oCACI;AAAK,cAAA,SAAS,EAAG,gCAA+Bf,4BAA4B,CAAC,OAAD,CAA5B,GAAwC,EAAxC,GAA6C,SAAU,EAAvG;AAAA,sCACI;AAAO,gBAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AACI,gBAAA,IAAI,EAAC,MADT;AACgB,gBAAA,IAAI,EAAC,OADrB;AAC6B,gBAAA,EAAE,EAAC,OADhC;AACwC,gBAAA,WAAW,EAAC,iBADpD;AAEI,gBAAA,QAAQ,EAAEwB,CAAC,IAAI,KAAKP,YAAL,CAAkBO,CAAC,CAAC+D,MAAF,CAAS/E,KAA3B,EAAkCgB,CAAC,CAAC+D,MAAF,CAASpE,EAA3C;AAFnB;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAOI;AACK,cAAA,SAAS,EAAG,iCAAgCnB,4BAA4B,CAAC,QAAD,CAA5B,GAAyC,EAAzC,GAA8C,SAAU,EADzG;AAAA,sCAEI;AAAO,gBAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AACI,gBAAA,IAAI,EAAC,MADT;AACgB,gBAAA,IAAI,EAAC,IADrB;AAC0B,gBAAA,EAAE,EAAC,IAD7B;AACkC,gBAAA,WAAW,EAAC,cAD9C;AAEI,gBAAA,QAAQ,EAAEwB,CAAC,IAAI,KAAKP,YAAL,CAAkBO,CAAC,CAAC+D,MAAF,CAAS/E,KAA3B,EAAkCgB,CAAC,CAAC+D,MAAF,CAASpE,EAA3C;AAFnB;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ,eAcI;AAAK,cAAA,SAAS,EAAG,iCAAgCnB,4BAA4B,CAAC,QAAD,CAA5B,GAAyC,EAAzC,GAA8C,SAAU,EAAzG;AAAA,sCACI;AAAO,gBAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AACI,gBAAA,IAAI,EAAC,MADT;AACgB,gBAAA,IAAI,EAAC,IADrB;AAC0B,gBAAA,EAAE,EAAC,IAD7B;AACkC,gBAAA,WAAW,EAAC,iBAD9C;AAEI,gBAAA,QAAQ,EAAEwB,CAAC,IAAI,KAAKP,YAAL,CAAkBO,CAAC,CAAC+D,MAAF,CAAS/E,KAA3B,EAAkCgB,CAAC,CAAC+D,MAAF,CAASpE,EAA3C;AAFnB;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdJ,eAqBI;AAAK,cAAA,SAAS,EAAG,+BAA8BnB,4BAA4B,CAAC,MAAD,CAA5B,GAAuC,EAAvC,GAA4C,SAAU,GAArG;AAAA,sCACI;AAAO,gBAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AACI,gBAAA,IAAI,EAAC,KADT;AACe,gBAAA,IAAI,EAAC,MADpB;AAC2B,gBAAA,EAAE,EAAC,MAD9B;AACqC,gBAAA,WAAW,EAAC,4BADjD;AAEI,gBAAA,QAAQ,EAAEwB,CAAC,IAAI,KAAKP,YAAL,CAAkBO,CAAC,CAAC+D,MAAF,CAAS/E,KAA3B,EAAkCgB,CAAC,CAAC+D,MAAF,CAASpE,EAA3C;AAFnB;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBArBJ,EA2BK,KAAKlB,KAAL,CAAWC,MAAX,CAAkB4B,IAAlB,CAAuBvB,OAAvB,iBAAoC,QAAC,eAAD;AAAiB,cAAA,OAAO,EAAEwE;AAA1B;AAAA;AAAA;AAAA;AAAA,oBA3BzC,eA4BI;AAAK,cAAA,SAAS,EAAG,kCAAiC/E,4BAA4B,CAAC,SAAD,CAA5B,GAA0C,EAA1C,GAA+C,SAAU,GAA3G;AAAA,sCACI;AAAO,gBAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AACI,gBAAA,IAAI,EAAC,UADT;AACoB,gBAAA,IAAI,EAAC,SADzB;AAEI,gBAAA,EAAE,EAAC,SAFP;AAGI,gBAAA,QAAQ,EAAEwB,CAAC,IAAI,KAAKP,YAAL,CAAkBO,CAAC,CAAC+D,MAAF,CAAS/E,KAA3B,EAAkCgB,CAAC,CAAC+D,MAAF,CAASpE,EAA3C;AAHnB;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5BJ,EAoCK,KAAKlB,KAAL,CAAWC,MAAX,CAAkB6B,OAAlB,CAA0BxB,OAA1B,iBAAuC,QAAC,eAAD;AAAiB,cAAA,OAAO,EAAEuE;AAA1B;AAAA;AAAA;AAAA;AAAA,oBApC5C,eAqCI;AAAK,cAAA,SAAS,EAAC,4BAAf;AAAA,sCACI;AAAO,gBAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AACI,gBAAA,IAAI,EAAC,MADT;AACgB,gBAAA,IAAI,EAAC,YADrB;AAEI,gBAAA,MAAM,EAAC,2BAFX;AAGI,gBAAA,EAAE,EAAC,YAHP;AAII,gBAAA,GAAG,EAAC,qBAJR;AAKI,gBAAA,QAAQ,EAAEtD,CAAC,IAAI,KAAKP,YAAL,CAAkBO,CAAC,CAAC+D,MAAF,CAASC,KAA3B,EAAkChE,CAAC,CAAC+D,MAAF,CAASpE,EAA3C;AALnB;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,eAwDI;AAAK,YAAA,SAAS,EAAC,yBAAf;AAAA,oCACI;AACI,cAAA,IAAI,EAAC,QADT;AAEI,cAAA,OAAO,EAAE,MAAI,KAAKsD,QAAL,EAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAQ,cAAA,IAAI,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAxDJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA2FH;;AA3V8B;;AAAzB9E,O,CACG8F,W,GAAc5G,O;AA6VvB,eAAec,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport Nav from './Nav';\nimport FilterButtons from './FilterButtons';\nimport FilterButtonsForm from './FilterButtonsForm';\nimport Context from '../Context'\nimport '../_styles/Form.css';\nimport config from '../config'\nimport ValidationError from './ValidationError'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCalendarAlt, faIdCard, faSmile  } from '@fortawesome/free-regular-svg-icons';\nimport { faPodcast, faSeedling, faBookOpen,faUser, faHeartbeat} from '@fortawesome/free-solid-svg-icons';\nimport {BASE_URL} from \"../../src/config\";\nimport {BASE_URL_FRONTEND} from \"../../src/config\";\n\nclass NewPost extends Component{\n  static contextType = Context;\n  constructor(props){\n    super(props);\n    this.state={\n      error:null,\n      submitDisabled:true,\n      fieldType:'recipe',\n      areTypeSpecificFieldsVisible:{'title':false, 'author':false, 'by':false,'link':false,'content':true},\n      inputs:{\n      title:{value:\"\",touched:false},\n      author:{value:\"\",touched:false},\n      by:{value:\"\",touched:false},\n      link:{value:\"\",touched:false},\n      content:{value:\"\",touched:false},\n      post_image:{value:\"\",touched:false, file:\"\"}},\n      user: this.props.match.params.username\n    }//end of state\n  }\n  //updates the fields displayed depending on the type of post\n  updateFields=(fieldTypeSelected)=>{\n    const {areTypeSpecificFieldsVisible} = this.state;\n    const {inputs} = this.state\n   //first resetting fields to not display\n    Object.keys(areTypeSpecificFieldsVisible).forEach(key => {\n       areTypeSpecificFieldsVisible[key]=false\n    });\n  //resetting any touched input values to false\n    Object.keys(inputs).forEach(key => {\n     inputs[key].touched=false;\n    });\n  //clear values\n    Object.keys(inputs).forEach(key => {\n     inputs[key].value=\"\";\n    });\n    inputs.post_image.file=\"\";\n        if(fieldTypeSelected==='book'){\n            areTypeSpecificFieldsVisible['title']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['content']=true;\n            areTypeSpecificFieldsVisible['link']=true;\n        }\n        else if(fieldTypeSelected==='lifestyle'){\n            areTypeSpecificFieldsVisible['title']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['content']=true;\n        }\n        else if(fieldTypeSelected==='podcast'){\n            areTypeSpecificFieldsVisible['content']=true;\n            areTypeSpecificFieldsVisible['link']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['title']=true;\n        }\n        else if(fieldTypeSelected==='event'){\n            areTypeSpecificFieldsVisible['content']=true;\n            areTypeSpecificFieldsVisible['link']=true;\n            areTypeSpecificFieldsVisible['title']=true;        \n        }\n        else if(fieldTypeSelected==='recipe'){\n           areTypeSpecificFieldsVisible['title']=true;\n            areTypeSpecificFieldsVisible['by']=true;\n            areTypeSpecificFieldsVisible['content']=true;\n        }\n\n        //clear all form fields \n         this.refs.form.reset();\n\n        this.setState({\n            fieldType:fieldTypeSelected,\n            inputs:inputs,\n            submitDisabled:true,\n            areTypeSpecificFieldsVisible:areTypeSpecificFieldsVisible})\n    }\n\n  updateChange=(inputValue, id)=>{\n    const {inputs} = this.state;\n    //console.log(inputs)\n    \n    if(id!=='post_image'){\n        inputs[id]={value:inputValue,touched:true}\n     }\n     else if(id==='post_image'){\n         console.log(inputValue[0])\n         inputs[id]={file:inputValue[0],touched:true}\n     }\n    this.setState({inputs:inputs})\n    this.checkDisableSubmit();\n  }\n\n  checkDisableSubmit(){\n    console.log(`cDS ${this.state.fieldType} ${this.state.inputs.title.touched} ${this.state.inputs.author.touched} ${this.state.submitDisabled}`)\n    if(this.state.inputs.post_image.touched){\n        this.setState({submitDisabled:false})\n    }\n    else{\n        if(this.state.fieldType === 'lifestyle' || this.state.fieldType === 'event' || this.state.fieldType === 'podcast') {\n        if( this.state.inputs.title.touched && this.state.inputs.link.touched && this.state.submitDisabled)\n        {this.setState({submitDisabled:false})}\n        }\n        else if(this.state.fieldType==='recipe' && this.state.inputs.content.touched && this.state.submitDisabled){\n        console.log(`this recipe if ran `)\n        this.setState({submitDisabled:false})  \n        }\n        else if(this.state.fieldType==='book' && this.state.inputs.title.touched && this.state.inputs.author.touched && this.state.submitDisabled){\n            console.log(`this book if ran `)\n            this.setState({submitDisabled:false})  \n        }  \n    }\n}\n\nvalidateContent(){\n    const content = this.state.inputs.content.value.trim();\n    if (content.length>800){\n        return 'Please keep posts under 800 characters.'\n    } \n}\n\nvalidateLink(){\n    const link = this.state.inputs.link.value;\n    let regexp =  /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n\n    if (!regexp.test(link))\n    {\n        return 'Please enter a valid url'\n    }\n}\n\nhandleSubmit=(e)=>{\n    e.preventDefault();\n    const {inputs, fieldType}=this.state;     \n    \n    let newPostWithImage = {\n        user_id:1,\n        post_type:fieldType,\n        title:inputs.title.value,\n        link:inputs.link.value,\n        content:inputs.content.value,\n        by:inputs.by.value,\n        image_path:''\n    }\n    let url = `${config.API_ENDPOINT}/posts`\n    if(inputs.post_image.file){\n        let formData = new FormData();\n        const fileField = inputs.post_image.file;        \n        formData.append('image', fileField);        \n\n        let image_url = `${config.API_ENDPOINT}/upload`;\n        \n        fetch(image_url, {\n            method: 'POST',\n            body: formData,\n            })\n        .then(res => {\n           return res.json()\n        })\n        .then(res => {\n            newPostWithImage.image_path = res.data.image;\n            console.log(newPostWithImage)\n           return  fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(newPostWithImage),\n                headers: {\n                  'content-type': 'application/json',\n                 // 'authorization': `Bearer ${config.API_KEY}`\n                }\n              })\n        })\n       .then(resp => {\n          if (!resp.ok) {\n          // get the error message from the response,\n            return resp.json().then(error => {\n            // then throw it\n            throw error\n            })\n          }\n           return resp.json()\n        })\n        .then(post => {\n            this.props.history.push('/dashboard')\n            this.context.addPost(newPostWithImage)       \n        })\n        .catch(error => {\n            this.setState({ error })\n        })    \n    }    \nelse if(!inputs.post_image.file){  \n  let newPost = {\n    user_id:1,\n    post_type:fieldType,\n    title:inputs.title.value,\n    link:inputs.link.value,\n    content:inputs.content.value,\n    by:inputs.by.value,\n    image_path:''\n}\nfetch(url, {\n    method: 'POST',\n    body: JSON.stringify(newPost),\n    headers: {\n    'content-type': 'application/json',\n    // 'authorization': `Bearer ${config.API_KEY}`\n    }  \n})\n.then(res => {\n    if (!res.ok) {\n        // get the error message from the response,\n        return res.json().then(error => {\n        // then throw it\n        throw error\n        })\n    }\n    return res.json()\n    })\n    .then(post => {\n      this.props.history.push('/dashboard')\n      this.context.addPost(newPost)    \n    })\n    .catch(error => {\n      this.setState({ error })\n    })\n  }\n}      \n\npostData()\n{\n    console.log(\"Clicked!\")\n    const user = this.props.match.params.username;\n    console.log(user);\n    const {inputs, fieldType}=this.state; \n    //user_id, title, link, start_date,by,content, post_type\n    console.log(BASE_URL+'/posts/'+user);\n    fetch(BASE_URL+'/posts/'+user, {\n      method:'post',\n      headers:{'Content-Type' : 'application/json'},\n      body:JSON.stringify({\n        post_type:fieldType,\n        title:inputs.title.value,\n        link:inputs.link.value,\n        content:inputs.content.value,\n        by:inputs.by.value,\n        image_path:'' \n      })\n    })\n    .then(response=> response.json())\n    .then(response=>{\n        console.log(response)\n      alert(\"Thank you for your post!\");\n      //window.location.href = BASE_URL_FRONTEND+\"/my-account\";\n    })\n    .catch(err => alert(err))\n}\nrender(){\n    const { areTypeSpecificFieldsVisible } = this.state;\n    const contentError = this.validateContent();\n    const linkError = this.validateLink();\n\n    return(\n        <div className=\"new-post form-page\">\n            <header>\n                <Nav pageType={'interior'} user={this.state.user}/>\n                <FilterButtons\n                    buttonInfo={[                    \n                    {aria_label:'my posts',icon_type:faUser, link:`/${this.state.user}/dashboard`, display_change:'user', tooltipMessage:'view all your posts',tooltipClass:'bottom-farright'},\n                    ]}                \n                />\n            </header>\n            <main>\n            <FilterButtonsForm\n                    updateFields = {this.updateFields}\n                    buttonInfo={[\n                    {aria_label:'fields to create new recipe post',icon_type:faSeedling,field_type:'recipe', tooltipMessage:'create a recipe post',tooltipClass:'bottom-farright'},\n                    {ariaLabel:'fields to create new book post',icon_type:faBookOpen, field_type:'book', tooltipMessage:'create a book post',tooltipClass:'bottom-right'},\n                    {aria_label:'fields to create new podcast post',icon_type:faPodcast,field_type:'podcast', tooltipMessage:'create a podcast post',tooltipClass:'bottom-center'},\n                    {aria_label:'lifestyle posts',icon_type:faHeartbeat, field_type:'lifestyle',tooltipMessage:'create a lifestyle post',tooltipClass:'bottom-left'},\n                    {aria_label:'event posts',icon_type:faCalendarAlt,field_type:'event', tooltipMessage:'create an event post',tooltipClass:'bottom-farleft'}]}\n                />\n\n                <form className=\"new-post-form\" \n                    onSubmit={e=>this.handleSubmit(e)}\n                    ref=\"form\">\n                    <div className=\"form-intro\">\n                        <p>Please use the buttons above to select the type of post you want to create and the form below to share some positivity with others.<FontAwesomeIcon className=\"filter-icon inline-block-icon\" icon={faSmile} /></p>\n                        <h2>Create a new {this.state.fieldType} post</h2>\n                    </div>\n                    <div>\n                        <div className={`form-field-group field-title ${areTypeSpecificFieldsVisible['title'] ? \"\" : \" hidden\"}`}>\n                            <label htmlFor=\"title\">Title*</label>\n                            <input \n                                type=\"text\" name=\"title\" id=\"title\" placeholder=\"A New Beginning\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        <div \n                             className={`form-field-group field-author ${areTypeSpecificFieldsVisible['author'] ? \"\" : \" hidden\"}`}>\n                            <label htmlFor=\"by\">Author</label>\n                            <input \n                                type=\"text\" name=\"by\" id=\"by\" placeholder=\"Maya Angelou\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        <div className={`form-field-group field-doctor ${areTypeSpecificFieldsVisible['doctor'] ? \"\" : \" hidden\"}`}>\n                            <label htmlFor=\"by\">Nutritionist</label>\n                            <input \n                                type=\"text\" name=\"by\" id=\"by\" placeholder=\"Kimberly Snyder\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        \n                        <div className={`form-field-group field-link ${areTypeSpecificFieldsVisible['link'] ? \"\" : \" hidden\"} `}>\n                            <label htmlFor=\"link\">Link*</label>\n                            <input \n                                type=\"url\" name=\"link\" id=\"link\" placeholder=\"http://someamazingsite.com\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}/>\n                        </div>\n                        {this.state.inputs.link.touched  && (<ValidationError message={linkError}/>)}\n                        <div className={`form-field-group field-content ${areTypeSpecificFieldsVisible['content'] ? \"\" : \" hidden\"} `}>\n                            <label htmlFor=\"content\">Content*</label>\n                            <textarea\n                                type=\"textarea\" name=\"content\"\n                                id=\"content\"\n                                onChange={e => this.updateChange(e.target.value, e.target.id)}\n                                />\n                        </div>\n                        {this.state.inputs.content.touched  && (<ValidationError message={contentError}/>)}                        \n                        <div className=\"form-field-group field-img\">\n                            <label htmlFor=\"post-image\">Upload Screenshot</label>\n                            <input\n                                type=\"file\" name=\"post_image\"\n                                accept=\".png,.jpg,.gif.bmp, .jpeg\"\n                                id=\"post_image\"\n                                alt=\"user-uploaded-image\"\n                                onChange={e => this.updateChange(e.target.files, e.target.id)}\n                                />\n                        </div>\n                    </div>\n                        \n                    <div className=\"form-buttons button-row\">    \n                        <button \n                            type=\"button\"\n                            onClick={()=>this.postData()}\n                        >\n                            Post</button>\n                        <button type=\"reset\">Cancel</button>\n                    </div>\n                  \n                </form>\n                \n            </main>\n        </div>\n    )\n}\n}\n\nexport default NewPost;"]},"metadata":{},"sourceType":"module"}